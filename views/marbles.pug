extends ./template/layout.pug


block custom_header
    // --------------- Header -------------- //
    script(src='/js/config.js?v=' + bag.jshash)
    script(src='/js/ui_events.js?v=' + bag.jshash)
    //script(src='/js/websocket.js?v=' + bag.jshash)
    //script(src='/js/startup.js?v=' + bag.jshash)
    //script(src='/js/tx_story.js?v=' + bag.jshash)
    link(rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/zui/1.8.1/css/zui.min.css")
    script(src="//cdnjs.cloudflare.com/ajax/libs/zui/1.8.1/js/zui.min.js")
    //script(src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js")
    script(src="https://unpkg.com/vue/dist/vue.js")
    link(rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css")
    script(src="https://unpkg.com/element-ui/lib/index.js")
    link(rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css")
    script(src="https://unpkg.com/element-ui/lib/index.js")
    link(href="lib/datetimepicker/datetimepicker.min.css" rel="stylesheet")
    script(src="lib/datetimepicker/datetimepicker.min.js")
    link(href="lib/chosen/chosen.min.css" rel="stylesheet")
    link(href="css/map.css" rel="stylesheet")
    script(src="lib/chosen/chosen.min.js")
    link(href="lib/datagrid/zui.datagrid.min.css" rel="stylesheet")
    script(src="lib/datagrid/zui.datagrid.min.js")
    link(type="text/css" rel="stylesheet" href="/css/main.css?v=" + bag.csshash)
    script(src="http://api.map.baidu.com/api?v=2.0&ak=BjGa4MDmGMiqB04Hrjn9iYvxx94ERYPu")
    //script(src="http://echarts.baidu.com/build/dist/echarts.js")
    script(src='/js/util.js?v=' + bag.jshash)
    script(src='/js/timer.js?v=' + bag.jshash)
    script(src='/js/BmapUtil.js?v=' + bag.jshash)
    script(src='/js/chargingPile.js?v=' + bag.jshash)
    script(src='/js/chargingStation.js?v=' + bag.jshash)
    script(src='/js/electricVehicle.js?v=' + bag.jshash)
    script(src='/js/task.js?v=' + bag.jshash)
    script(src='/js/user.js?v=' + bag.jshash)
    script(src='/js/runTaskLog.js?v=' + bag.jshash)
    script(src='/js/electricVehicle.js?v=' + bag.jshash)
    script(src='/js/line.js?v=' + bag.jshash)
    script(src='/js/mapping.js?v=' + bag.jshash)
    script(src='/js/point.js?v=' + bag.jshash)
    //script(src='/js/util/echarts.common.min.js')
    script(type='text/javascript').
        // $(document).ready(function () {
        //     var centerPoint = [104.0863, 30.656913];
        //     Bmap.mapInit("mainPanel",centerPoint);
        //     console.log(Bmap)
        // });
        $(function () {
            // var ws = {};
            // fromLS = window.localStorage.getItem(lsKey);
            // if (fromLS) fromLS = JSON.parse(fromLS);
            // else fromLS = {story_mode: false};					//dsh todo remove this
            // console.log('from local storage', fromLS);
            // connect_to_server();

            var centerPoint = [104.0863, 30.656913];
            Bmap.mapInit("mainPanel", centerPoint);
            Bmap.ZoomControlInit(Bmap.map);
            Bmap.ZoomControlInitLEFT(Bmap.map);
            var mapType1 = new BMap.MapTypeControl(
                {
                    mapTypes: [BMAP_NORMAL_MAP, BMAP_HYBRID_MAP],
                    anchor: BMAP_ANCHOR_BOTTOM_RIGHT
                }
            );
            Bmap.map.addControl(mapType1);
            getAllLine();
            getAllChargingStation();
            getAllTElectricVehicleWithLine();
            getCurrTimeSetSysTime();
            User.getUserList();
            initUserAccount();
            initchargingStationAccount();
            queryAllUserAccounts();
                // var p1 = new BMap.Point(104.130648, 30.57432);
                // var p2 = new BMap.Point(104.130648, 30.57432);
                // var p3 = new BMap.Point(104.088899, 30.790211);
                // var p4 = new BMap.Point(103.940602, 30.715246);
                //
                // var options = {
                //     renderOptions: {map: Bmap.map, autoViewport: true},
                //     onSearchComplete: function (results) {
                //         if (driving.getStatus() == BMAP_STATUS_SUCCESS) {
                //             // 获取第一条方案
                //             var plan = results.getPlan(0);
                //             // 获取方案的驾车线路
                //             var route = plan.getRoute(0);
                //             // 获取每个关键步骤,并输出到页面
                //             var s = [];
                //             for (var j = 0; j < plan.getNumRoutes(); j++) {
                //                 var route = plan.getRoute(j);
                //
                //                 // for (var i = 0; i < route.getNumSteps(); i++) {
                //                 //     var step = route.getStep(i);
                //                 //     s.push((i + 1) + ". " + step.getDescription());
                //                 // }
                //                 for (var i = 0; i < route.zr.length; i++) {
                //                     // console.log(route.zr[i].lat+","+route.zr[i].lng);
                //                     // const param = {lat:route.zr[i].lat,lag:route.zr[i].lng};
                //                     // $.ajax({
                //                     //     type: "post",
                //                     //     url: BaseUrl+"/api/tPoint/save",
                //                     //     data: JSON.stringify(param),
                //                     //     dataType: "json",
                //                     //     contentType: 'application/json;charset=UTF-8', //contentType很重要
                //                     //     success: function (data) {
                //                     //     }
                //                     // });
                //                 }
                //             }
                //         }
                //         // debugger;
                //     }
                // };
                // var driving = new BMap.DrivingRoute(Bmap.map, options);
                // driving.search(p1, p2, {waypoints: [p3, p4]});
            //waypoints表示途经
            // var mPoint = new BMap.Point(centerPoint[0], centerPoint[1]);
            // var circle = new BMap.Circle(mPoint, 1000, {
            //     fillColor: "blue",
            //     strokeWeight: 1,
            //     fillOpacity: 0.3,
            //     strokeOpacity: 0.3
            // });
            // map.addOverlay(circle);
            // var local = new BMap.LocalSearch(Bmap.map, {renderOptions: {map: Bmap.map, autoViewport: false}});
            // local.searchNearby('充电站', mPoint, 10000);
            // getPoints();

            var pStart = new BMap.Point(103.940118,30.734065);
            var pEnd = new BMap.Point(104.208116,30.579724);
            // var bs = new BMap.Bounds(pStart, pEnd);   //自己规定范围
            var Polyline = new BMap.Polyline([
            new BMap.Point(pStart.lng,pStart.lat),
            new BMap.Point(pEnd.lng,pStart.lat),
            new BMap.Point(pEnd.lng,pEnd.lat),
            new BMap.Point(pStart.lng,pEnd.lat),
            new BMap.Point(pStart.lng,pStart.lat)
            ], {strokeColor:"blue", strokeWeight:6, strokeOpacity:0.5});
            Bmap.map.addOverlay(Polyline);
        })


block navpanel
    // --------------- Navigation Bar  -------------- //
    include ./template/nav.pug


block content
    //#contentPanel
    //    include ./panel_startup.pug

        // --------------- Home Panel
        //include panel_home

        // --------------- Create Panel
        //include ./panel_create.pug

        // --------------- Start Up Walk Through Panel
        //include ./panel_startup.pug

        // --------------- Walk Transaction Panel
        //include ./panel_tx_story.pug

        // --------------- Settings Panel
        //include ./panel_settings.pug

        // --------------- Disable Owner Panel
        //include ./panel_disable_owner.pug

block footer
    include ./template/footer.pug
